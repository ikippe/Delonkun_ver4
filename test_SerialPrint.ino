int _ABVAR_1_M = 0 ;
int _ABVAR_2_D = 0 ;
int ardublockUltrasonicSensorCodeAutoGeneratedReturnCM(int trigPin, int echoPin)
{
  long duration;
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(20);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  duration = duration / 59;
  if ((duration < 2) || (duration > 300)) return false;
  return duration;
}

void __ardublockDigitalWrite(int pinNumber, boolean status)
{
  pinMode(pinNumber, OUTPUT);
  digitalWrite(pinNumber, status);
}



int getSensorMM(int trigPin, int echoPin)
{
  long duration;
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(20);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  duration = duration / 6;
  if ((duration < 5) || (duration > 3000)) return false;
  return duration;
}


void RIGHT();
void BACK();
void STOP();
void FORWARD();
void LEFT();

void setup()
{
  Serial.begin(9600);
  digitalWrite( 6 , LOW );

  _ABVAR_1_M = 7 ;

  STOP();

  Serial.print("-- START --");
  Serial.println();

}

void loop()
{
  FORWARD();
  int d = getSensorMM( 6 , 5 ) ;
  Serial.println(d);
  delay(500);
  
}

void BACK()
{
  __ardublockDigitalWrite(_ABVAR_1_M, LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 1 ), HIGH);
  __ardublockDigitalWrite(( _ABVAR_1_M + 2 ), LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 3 ), HIGH);
}

void STOP()
{
  __ardublockDigitalWrite(_ABVAR_1_M, LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 1 ), LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 2 ), LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 3 ), LOW);
}

void LEFT()
{
  __ardublockDigitalWrite(_ABVAR_1_M, LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 1 ), HIGH);
  __ardublockDigitalWrite(( _ABVAR_1_M + 2 ), HIGH);
  __ardublockDigitalWrite(( _ABVAR_1_M + 3 ), LOW);
}

void FORWARD()
{
  __ardublockDigitalWrite(_ABVAR_1_M, HIGH);
  __ardublockDigitalWrite(( _ABVAR_1_M + 1 ), LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 2 ), HIGH);
  __ardublockDigitalWrite(( _ABVAR_1_M + 3 ), LOW);
}

void RIGHT()
{
  __ardublockDigitalWrite(_ABVAR_1_M, HIGH);
  __ardublockDigitalWrite(( _ABVAR_1_M + 1 ), LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 2 ), LOW);
  __ardublockDigitalWrite(( _ABVAR_1_M + 3 ), HIGH);
}


